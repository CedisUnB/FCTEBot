# utils/api_helper.py
import httpx
import logging

logger = logging.getLogger(__name__)
RAG_API_URL = "http://127.0.0.1:8000/responder"

async def call_rag_api(query: str) -> str:
    """
    Faz uma chamada ass√≠ncrona para o servi√ßo RAG FastAPI.
    """
    try:
        async with httpx.AsyncClient() as client:
            response = await client.post(
                RAG_API_URL,
                json={"query": query},
                timeout=120.0  # Timeout generoso para a API do GenAI
            )
            response.raise_for_status()  # Lan√ßa exce√ß√£o para erros HTTP (4xx, 5xx)
            data = response.json()
            return data.get("answer", "N√£o foi poss√≠vel obter uma resposta.")

    except httpx.HTTPStatusError as e:
        logger.error(f"Erro de status da API RAG: {e.response.status_code} - {e.response.text}")
        if e.response.status_code == 503:
            return "ü§ñ Desculpe, estou com muitas solicita√ß√µes no momento. Por favor, tente novamente em alguns instantes."
        return "‚ùå Ocorreu um erro ao me comunicar com o servi√ßo de intelig√™ncia. Por favor, avise o administrador."
    except httpx.RequestError as e:
        logger.error(f"Erro de conex√£o com a API RAG: {e}")
        return "‚ùå N√£o consegui me conectar ao servi√ßo de intelig√™ncia. Por favor, verifique se ele est√° no ar e tente novamente."
    except Exception as e:
        logger.error(f"Erro inesperado ao chamar a API RAG: {e}", exc_info=True)
        return "‚ùå Ocorreu um erro inesperado ao processar sua pergunta."